//go:build ignore
// +build ignore

package main

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"path"
	"path/filepath"
	"runtime"
	"strings"

	gui "github.com/bhojpur/gui/pkg/engine"
)

const fontFace = "NotoSans"

const fileHeader = "// auto-generated: Bhojpur GUI - Foundation Framework\n" + // to exclude this file in goreportcard (it has to be first)
	"// Code generated by '$ guiutl bundle'. DO NOT EDIT." // idiomatic mark, see https://golang.org/s/generatedcode

func formatVariable(name string) string {
	str := strings.Replace(name, "-", "", -1)
	return strings.Replace(str, "_", "", -1)
}

func bundleFile(name string, filepath string, f io.Writer) {
	res, err := gui.LoadResourceFromPath(filepath)
	if err != nil {
		gui.LogError("Unable to load file "+filepath, err)
		return
	}
	staticRes, ok := res.(*gui.StaticResource)
	if !ok {
		gui.LogError("Unable to format resource", fmt.Errorf("unexpected resource type %T", res))
		return
	}
	v := fmt.Sprintf("var %s = &gui.StaticResource{\n\tStaticName: %q,\n\tStaticContent: []byte(%q),\n}\n\n",
		formatVariable(name), staticRes.StaticName, staticRes.StaticContent)
	_, err = f.Write([]byte(v))
	if err != nil {
		gui.LogError("Unable to write to bundled file", err)
	}
}

func bundleFont(font, name string, f io.Writer) {
	_, dirname, _, _ := runtime.Caller(0)
	path := path.Join(path.Dir(dirname), "font", fmt.Sprintf("%s-%s.ttf", font, name))

	if name == "Powerline" && font != fontFace {
		name = "Monospace"
	}

	bundleFile(strings.ToLower(name), path, f)
}

func iconDir() string {
	_, dirname, _, _ := runtime.Caller(0)
	return path.Join(path.Dir(dirname), "icons")
}

func bundleIcon(name string, f io.Writer) {
	path := path.Join(iconDir(), fmt.Sprintf("%s.svg", name))

	formatted := fmt.Sprintf("%sIconRes", strings.ToLower(name))
	bundleFile(formatted, path, f)
}

func writeFile(filename string, contents []byte) error {
	formatted, err := format.Source(contents)
	if err != nil {
		return err
	}
	_, dirname, _, _ := runtime.Caller(0)
	return ioutil.WriteFile(filepath.Join(filepath.Dir(dirname), filename), formatted, 0644)
}

func main() {
	f := &bytes.Buffer{}
	f.WriteString(fileHeader + "\n\npackage theme\n\nimport gui \"github.com/bhojpur/gui/pkg/engine\"\n\n")
	bundleFont(fontFace, "Regular", f)
	bundleFont(fontFace, "Bold", f)
	bundleFont(fontFace, "Italic", f)
	bundleFont(fontFace, "BoldItalic", f)
	bundleFont("DejaVuSansMono", "Powerline", f)
	err := writeFile("bundled-fonts.go", f.Bytes())
	if err != nil {
		gui.LogError("Unable to write file:", err)
		return
	}

	f = &bytes.Buffer{}
	f.WriteString(fileHeader + "\n\npackage theme\n\nimport gui \"github.com/bhojpur/gui/pkg/engine\"\n\n")
	icon := path.Join(iconDir(), "bhojpur.png")
	bundleFile("bhojpur-logo", icon, f)

	bundleIcon("cancel", f)
	bundleIcon("check", f)
	bundleIcon("delete", f)
	bundleIcon("search", f)
	bundleIcon("search-replace", f)
	bundleIcon("menu", f)
	bundleIcon("menu-expand", f)

	bundleIcon("check-box", f)
	bundleIcon("check-box-blank", f)
	bundleIcon("radio-button", f)
	bundleIcon("radio-button-checked", f)

	bundleIcon("content-add", f)
	bundleIcon("content-remove", f)
	bundleIcon("content-cut", f)
	bundleIcon("content-copy", f)
	bundleIcon("content-paste", f)
	bundleIcon("content-redo", f)
	bundleIcon("content-undo", f)

	bundleIcon("color-achromatic", f)
	bundleIcon("color-chromatic", f)
	bundleIcon("color-palette", f)

	bundleIcon("document", f)
	bundleIcon("document-create", f)
	bundleIcon("document-print", f)
	bundleIcon("document-save", f)

	bundleIcon("more-horizontal", f)
	bundleIcon("more-vertical", f)

	bundleIcon("info", f)
	bundleIcon("question", f)
	bundleIcon("warning", f)
	bundleIcon("error", f)

	bundleIcon("arrow-back", f)
	bundleIcon("arrow-down", f)
	bundleIcon("arrow-forward", f)
	bundleIcon("arrow-up", f)
	bundleIcon("arrow-drop-down", f)
	bundleIcon("arrow-drop-up", f)

	bundleIcon("file", f)
	bundleIcon("file-application", f)
	bundleIcon("file-audio", f)
	bundleIcon("file-image", f)
	bundleIcon("file-text", f)
	bundleIcon("file-video", f)
	bundleIcon("folder", f)
	bundleIcon("folder-new", f)
	bundleIcon("folder-open", f)
	bundleIcon("help", f)
	bundleIcon("history", f)
	bundleIcon("home", f)
	bundleIcon("settings", f)

	bundleIcon("mail-attachment", f)
	bundleIcon("mail-compose", f)
	bundleIcon("mail-forward", f)
	bundleIcon("mail-reply", f)
	bundleIcon("mail-reply_all", f)
	bundleIcon("mail-send", f)

	bundleIcon("media-music", f)
	bundleIcon("media-photo", f)
	bundleIcon("media-video", f)
	bundleIcon("media-fast-forward", f)
	bundleIcon("media-fast-rewind", f)
	bundleIcon("media-pause", f)
	bundleIcon("media-play", f)
	bundleIcon("media-record", f)
	bundleIcon("media-replay", f)
	bundleIcon("media-skip-next", f)
	bundleIcon("media-skip-previous", f)
	bundleIcon("media-stop", f)

	bundleIcon("view-fullscreen", f)
	bundleIcon("view-refresh", f)
	bundleIcon("view-zoom-fit", f)
	bundleIcon("view-zoom-in", f)
	bundleIcon("view-zoom-out", f)

	bundleIcon("volume-down", f)
	bundleIcon("volume-mute", f)
	bundleIcon("volume-up", f)

	bundleIcon("visibility", f)
	bundleIcon("visibility-off", f)

	bundleIcon("download", f)
	bundleIcon("computer", f)
	bundleIcon("storage", f)
	bundleIcon("upload", f)

	bundleIcon("account", f)
	bundleIcon("login", f)
	bundleIcon("logout", f)

	bundleIcon("list", f)
	bundleIcon("grid", f)

	err = writeFile("bundled-icons.go", f.Bytes())
	if err != nil {
		gui.LogError("Unable to write file: ", err)
		return
	}
}
